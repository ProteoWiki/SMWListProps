<?php

if ( !defined( 'MEDIAWIKI' ) ) {
       echo 'Not a valid entry point';
       exit( 1 );
}

if ( !defined( 'SMW_VERSION' ) ) {
       echo 'This extension requires Semantic MediaWiki to be installed.';
       exit( 1 );
}


/**
 * This class handles the search for Props.
 */
class SMWListProps {
	
        public static function executeGetListProps(  $parser, $frame, $args ) {
                
		// Let's disable cache
                $parser->disableCache();

		//Default current page
		$pagetitle = $parser->getTitle();

                // Let's get page
                if ( isset( $args[0] ) && $args[0]!='' ) {
                        $title = trim( $frame->expand( $args[0] ) );
			$pagetitle = Title::newFromText($title);
                }

		$smwpagetitle = SMWDIWikiPage::newFromTitle($pagetitle);

		$data = smwfGetStore()->getSemanticData($smwpagetitle);
		$diProperties = $data->getProperties();

		$listprops = array();

		// We remove param 0
		array_shift($args);

		$params = array();

		// We parametrize
		foreach ( $args as $arg ) {
			array_push( $params, trim( $frame->expand( $args ) ) );
		}

		// Options 
		$wikionly = false;


		// If value in array
		if ( in_array ( 'wikionly' , $params ) ) {

			$wikionly = true;	
		}

		foreach ( $diProperties as $diProperty ) {

			// Check if user defined
			if ( $wikionly == true && !$diProperty->isUserDefined() ) {
				continue;
			}

			$label = $diProperty->getLabel();
			if ( !empty($label)  ) {

				array_push( $listprops, $label );
			}
		}


		return( implode( ",", $listprops ) );

        }

        
}
